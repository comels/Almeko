// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  link          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  favoriteIds   String[]  @db.ObjectId

  recipes  Recipe[]
  comments Comment[]
  likes    Like[]
  accounts Account[]
  sessions Session[]
}

model Recipe {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String   @db.ObjectId
  authorName    String
  name          String
  category      String
  withoutAlcool Boolean
  vegetarian    Boolean
  servings      Int
  createdAt     DateTime @default(now())
  ingredients   Json
  instructions  Json

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  recipeId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  recipeId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}
